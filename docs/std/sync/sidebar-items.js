initSidebarItems({"constant":[["ONCE_INIT","静态 [`Once`] 值的初始化值。"]],"enum":[["TryLockError","枚举可能与 [`TryLockResult`] 相关的错误，这些错误可能是从 `Mutex` 上的 `try_lock` 方法或 `RwLock` 上的 `try_read` 和 `try_write` 方法获取锁时发生的。"]],"mod":[["atomic","原子类型"],["mpsc","多生产者，单消费者 FIFO 队列通信原语。"]],"struct":[["Arc","线程安全的引用计数指针。`Arc` 代表原子引用计数。"],["Barrier","屏障使多个线程能够同步某些计算的开始。"],["BarrierWaitResult","当 [`Barrier`] 中的所有线程都汇合时，[`Barrier::wait()`] 将返回 `BarrierWaitResult`。"],["Condvar","条件变量"],["Mutex","互斥原语可用于保护共享数据"],["MutexGuard","互斥锁的 “scoped lock” 的 RAII 实现。 当此结构体被丢弃 (离开作用域) 时，这个锁将被解锁。"],["Once","同步原语，可用于运行一次性初始化。 对于 FFI 或相关功能的一次性初始化很有用。 该类型只能用 [`Once::new()`] 构造。"],["OnceState","状态产生于 [`Once::call_once_force () `] 的闭包参数。 该状态可用于查询 [`Once`] 的中毒状态。"],["PoisonError","一种错误类型，每当获取锁时都可以返回该错误。"],["RwLock","reader-writer 锁"],["RwLockReadGuard","RAII 结构，用于在丢弃锁时释放锁的共享读取访问。"],["RwLockWriteGuard","RAII 结构，用于在锁被丢弃时释放对锁的独占写访问。"],["WaitTimeoutResult","指示是否因超时而返回的条件变量的定时等待的类型。"],["Weak","`Weak` 是 [`Arc`] 的版本，该版本对托管分配具有非所有权引用。 通过调用 `Weak` 指针上的 `upgrade` 来访问该分配，该指针返回 [`Option`]`<`[`Arc`]`<T>>`。"]],"type":[["LockResult","一种类型别名，用于可能导致中毒的锁定方法。"],["TryLockResult","一种非别名锁定方法结果的类型别名。"]]});