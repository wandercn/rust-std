initSidebarItems({"enum":[["ErrorKind","一个列表，指定 I/O 错误的常规类别。"],["SeekFrom","列举可能在 I/O object 中进行搜索的方法。"]],"fn":[["copy","将 reader 的全部内容复制到 writer 中。"],["empty","为空的 reader 创建一个新的句柄。"],["read_to_string","将 [reader][Read] 的所有字节读入新的 [`String`]。"],["repeat","创建 reader 的实例，该实例无限重复一个字节。"],["sink","创建 writer 的实例，该实例将成功使用所有数据。"],["stderr","为当前进程的标准错误创建一个新的句柄。"],["stderr_locked","为当前进程的标准错误创建一个新的锁定句柄。"],["stdin","为当前进程的标准输入创建一个新的句柄。"],["stdin_locked","为当前进程的标准输入创建一个新的锁定句柄。"],["stdout","为当前进程的标准输出创建一个新的句柄。"],["stdout_locked","为当前进程的标准输出创建一个新的锁定句柄。"]],"mod":[["prelude","I/O Prelude。"]],"struct":[["BufReader","`BufReader<R>` 结构体将缓冲添加到任何 reader。"],["BufWriter","包装一个 writer 并缓冲其输出。"],["Bytes","reader 的 `u8` 值上的迭代器。"],["Chain","将两个 readers 链接在一起的适配器。"],["Cursor","`Cursor` 包装内存中的缓冲区，并为其提供 [`Seek`] 实现。"],["Empty","始终处于 EOF 的 reader。"],["Error","`Read`，`Write`，`Seek` 和关联的 traits 的 I/O 操作的错误类型。"],["Initializer","一种类型，用于有条件地初始化传递给 `Read` 方法的缓冲区。"],["IntoInnerError","[`BufWriter::into_inner`] 返回的错误，将写出缓冲区时发生的错误与缓冲的 writer object 结合在一起，可用于从条件中恢复。"],["IoSlice","`Write::write_vectored` 使用的缓冲区类型。"],["IoSliceMut","`Read::read_vectored` 使用的缓冲区类型。"],["LineWriter","包装一个 writer 并缓冲输出到它的内容，每当检测到换行符 (`0x0a，`‘\\n’`) 时刷新一次。"],["Lines","`BufRead` 实例的行上的迭代器。"],["Repeat","一个 reader，一个又一个的字节，一个又一个的字节，一个又一个的字节。"],["Sink","一个 writer，它将数据移入无效空间。"],["Split","对 `BufRead` 实例的内容进行迭代的迭代器，该实例在特定字节上拆分。"],["Stderr","进程的标准错误流的句柄。"],["StderrLock","[`Stderr`] 句柄的锁定引用。"],["Stdin","进程的标准输入流的句柄。"],["StdinLock","[`Stdin`] 句柄的锁定引用。"],["Stdout","当前进程的标准输出流的句柄。"],["StdoutLock","[`Stdout`] 句柄的锁定引用。"],["Take","Reader 适配器，用于限制从基础 reader 读取的字节。"]],"trait":[["BufRead","`BufRead` 是带有内部缓冲区的 `Read` 类型，它可以执行其他读取方式。"],["Read","`Read` trait 允许从源读取字节。"],["Seek","`Seek` trait 提供了一个游标，可以在字节流中移动它。"],["Write","trait 用于面向字节的 sinks 的对象。"]],"type":[["Result","I/O 操作的专用 `Result` 类型。"]]});