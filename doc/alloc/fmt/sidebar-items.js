initSidebarItems({"enum":[["Alignment","`Formatter::align` 返回的可能的对齐方式"]],"fn":[["format","`format` 函数采用 [`Arguments`] 结构体，并返回生成的格式化字符串。"],["write","`write` 函数接受一个输出流，以及一个可以与 `format_args!` 宏预编译的 `Arguments` 结构体。"]],"macro":[["Debug","派生宏，生成 trait `Debug` 的 impl。"]],"struct":[["Arguments","该结构体表示格式字符串及其参数的安全预编译版本。 由于无法安全地完成此操作，因此无法在运行时生成该文件，因此未提供任何构造函数，并且该字段为私有字段以防止修改。"],["DebugList","一个有助于 `fmt::Debug` 实现的结构体。"],["DebugMap","一个有助于 `fmt::Debug` 实现的结构体。"],["DebugSet","一个有助于 `fmt::Debug` 实现的结构体。"],["DebugStruct","一个有助于 `fmt::Debug` 实现的结构体。"],["DebugTuple","一个有助于 `fmt::Debug` 实现的结构体。"],["Error","将消息格式化为流后返回的错误类型。"],["Formatter","格式化配置。"]],"trait":[["Binary","`b` formatting."],["Debug","`?` formatting."],["Display","格式化 trait 为空格式， `{}`."],["LowerExp","`e` formatting."],["LowerHex","`x` formatting."],["Octal","`o` formatting."],["Pointer","`p` formatting."],["UpperExp","`E` formatting."],["UpperHex","`X` formatting."],["Write","trait，用于写入或格式化为 Unicode 接受的缓冲区或流。"]],"type":[["Result","格式化程序方法返回的类型。"]]});