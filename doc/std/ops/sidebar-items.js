initSidebarItems({"enum":[["Bound","一系列键的端点。"],["ControlFlow","用于告诉操作是应该提前退出还是像往常一样继续操作。"],["GeneratorState","恢复生成器的结果。"]],"struct":[["Range","(half-open) 范围包括在 (`start..end`) 之下和仅在 (`start..end`) 之上。"],["RangeFrom","范围仅包括 (`start..`) 以下的范围。"],["RangeFull","无限制范围 (`..`)。"],["RangeInclusive","范围包括 (`start..=end`) 的上下边界。"],["RangeTo","范围仅排在 (`..end`) 之上。"],["RangeToInclusive","范围仅包括 (`..=end`) 以上的范围。"]],"trait":[["Add","加法运算符 `+`。"],["AddAssign","加法赋值运算符 `+=`。"],["BitAnd","按位与运算符 `&`。"],["BitAndAssign","按位与分配运算符 `&=`。"],["BitOr","按位或运算符 `|`。"],["BitOrAssign","按位或赋值运算符 `|=`。"],["BitXor","按位 XOR 运算符 `^`。"],["BitXorAssign","按位 XOR 赋值运算符 `^=`。"],["CoerceUnsized","Trait，指示这是一个指针或一个包装器，其中可以在指针上执行大小调整。"],["Deref","用于不可变解引用操作，例如 `*v`。"],["DerefMut","用于可变解引用操作，例如在 `*v = 1;` 中。"],["DispatchFromDyn","这用于对象安全，以检查是否可以分派方法的接收者类型。"],["Div","除法运算符 `/`。"],["DivAssign","部门分配运算符 `/=`。"],["Drop","析构函数中的自定义代码。"],["Fn","采用不可变接收者的调用运算符的版本。"],["FnMut","采用可变接收者的调用运算符的版本。"],["FnOnce","具有按值接收者的调用运算符的版本。"],["FromResidual","用于指定哪些残差可以转换为哪些 [`crate::ops::Try`] 类型。"],["Generator","由内置生成器类型实现的 trait。"],["Index","用于在不可变上下文中索引操作 (`container[index]`)。"],["IndexMut","用于可变上下文中的索引操作 (`container[index]`)。"],["Mul","乘法运算符 `*`。"],["MulAssign","乘法分配运算符 `*=`。"],["Neg","一元求反运算符 `-`。"],["Not","一元逻辑否定运算符 `!`。"],["RangeBounds","`RangeBounds` 由 Rust 的内置范围类型实现，该范围类型由范围语法 (例如 `..`，`a..`，`..b`，`..=c`，`d..e` 或 `f..=g`) 产生。"],["Rem","余数运算符 `%`。"],["RemAssign","余数赋值运算符 `%=`。"],["Shl","左移位运算符 `<<`。 请注意，因为此 trait 是针对具有多个右侧类型的所有整数类型实现的，所以 Rust 的类型检查器对 `_ << _` 具有特殊的处理方式，将整数运算的结果类型设置为左侧操作数的类型。"],["ShlAssign","左移赋值运算符 `<<=`。"],["Shr","右移运算符 `>>`。 请注意，因为此 trait 是针对具有多个右侧类型的所有整数类型实现的，所以 Rust 的类型检查器对 `_ >> _` 具有特殊的处理方式，将整数运算的结果类型设置为左侧操作数的类型。"],["ShrAssign","右移赋值运算符 `>>=`。"],["Sub","减法运算符 `-`。"],["SubAssign","减法赋值运算符 `-=`。"],["Try","`?` 运算符和 `try {}` 块。"]]});